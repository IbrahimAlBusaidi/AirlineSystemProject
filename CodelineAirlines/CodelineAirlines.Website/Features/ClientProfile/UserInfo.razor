@page "/Profile"

@inject NavigationManager NavManager
@inject IHttpContextAccessor HttpContextAccessor
@inject IAuthService authService
@inject IUserService userService
@inject IPassengerService passengerService

@* Optional if the page is only for logged-in "user" role:
@attribute [Authorize(Roles = "user")]
*@

<!-- 1) Carousel Section (Hero at Top) -->
<div class="carousel-container">
    <div class="custom-carousel">
        <div class="custom-carousel-item">
            <!-- Replace this with your desired hero image -->
            <img src="/Images/ClientProfile/backgroundCarousel2.jpg" class="carousel-image" />
            <div class="text-overlay">
                <h1 class="text-title">My Profile</h1>
                <p class="text-subtitle">Manage Account & Passengers</p>
            </div>
        </div>
    </div>
</div>

<!-- 2) Main Container Overlapping the Carousel -->
<MudContainer MaxWidth="MaxWidth.Large" Class="pa-6 main-container fade-in-panel">
    <MudText Typo="Typo.h4" Class="mb-6 text-center">User Profile</MudText>

    <!-- User Info Card -->
    <MudCard Class="mb-4">
        <MudCardContent>
            <MudGrid>
                <!-- Email Field -->
                <MudItem xs="12" sm="6" Class="field-container">
                    <MudGrid AlignItems="Center">
                        <MudItem xs="4" Class="field-label">
                            <MudText Typo="Typo.subtitle1"><strong>Email:</strong></MudText>
                        </MudItem>
                        <MudItem xs="8" Class="field-value">
                            <MudText Typo="Typo.body1">@user.UserEmail</MudText>
                        </MudItem>
                    </MudGrid>
                </MudItem>

                <!-- Name Field -->
                <MudItem xs="12" sm="6" Class="field-container">
                    <MudGrid AlignItems="Center">
                        <MudItem xs="4" Class="field-label">
                            <MudText Typo="Typo.subtitle1"><strong>Name:</strong></MudText>
                        </MudItem>
                        <MudItem xs="8" Class="field-value">
                            <MudText Typo="Typo.body1">@user.UserName</MudText>
                        </MudItem>
                    </MudGrid>
                </MudItem>
            </MudGrid>
        </MudCardContent>
    </MudCard>

    <MudText Typo="Typo.h4" Class="mb-4">Passenger List</MudText>
    <!-- Passenger List -->
    <MudExpansionPanels>
        @if (passengers != null && passengers.Any())
        {
            @foreach (var passenger in passengers)
            {
                <MudExpansionPanel Text="@($"{passenger.PassengerName} → {passenger.Nationality}")">
                    <MudPaper Class="pa-4">
                        <MudGrid>
                            <MudItem xs="8">
                                <MudText Typo="Typo.subtitle1"><b>Passenger Name:</b> @passenger.PassengerName</MudText>
                                <MudText Typo="Typo.subtitle1"><b>Passport:</b> @passenger.Passport</MudText>
                                <MudText Typo="Typo.subtitle1"><b>Gender:</b> @passenger.Gender</MudText>
                                <MudText Typo="Typo.subtitle1"><b>Birth Date:</b> @passenger.BirthDate.ToString("dd/MM/yyyy")</MudText>
                                <MudText Typo="Typo.subtitle1"><b>Nationality:</b> @passenger.Nationality</MudText>
                                <MudText Typo="Typo.subtitle1"><b>Loyalty Points:</b> @passenger.LoyaltyPoints</MudText>
                            </MudItem>
                        </MudGrid>
                    </MudPaper>
                </MudExpansionPanel>
            }
        }
        else
        {
            <MudExpansionPanel Text="No passenger found">
                <MudText Color="Color.Secondary" Typo="Typo.body2">No passengers available at the moment.</MudText>
            </MudExpansionPanel>
        }
    </MudExpansionPanels>
</MudContainer>

@code {
    public int userId { get; set; }
    private List<PassengerOutputDTO> passengers = new();
    private string? Token;
    private User user = new();

    protected override void OnInitialized()
    {
        GetPassengerProfile();
    }

    private void GetPassengerProfile()
    {
        Token = HttpContextAccessor.HttpContext?.Request.Cookies["authToken"];
        if (!string.IsNullOrWhiteSpace(Token))
        {
            var claims = JwtHelper.GetClaimsFromToken(Token);
            if (claims != null)
            {
                userId = int.Parse(claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier).Value);
                user = userService.GetUserByIdWithRelatedData(userId);
                passengers = passengerService.GetPassengerProfile(userId);
            }
        }
    }
}
