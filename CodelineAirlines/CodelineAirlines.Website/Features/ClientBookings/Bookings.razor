@page "/bookings"

@inject NavigationManager NavManager
@inject IBookingService BookingService
@inject IPassengerService passengerService
@inject IUserService userService
@inject IHttpContextAccessor HttpContextAccessor
@inject IAuthService authService
@attribute [Authorize(Roles = "user")]

<!-- 1) Carousel Section (Hero at Top) -->
<div class="carousel-container">
    <div class="custom-carousel">
        <div class="custom-carousel-item">
            <!-- Replace with your image file/path if desired -->
            <img src="/Images/ClientBookings/backgroundCarousel2.jpg" class="carousel-image" />
            <div class="text-overlay">
                <h1 class="text-title">Your Bookings</h1>
                <p class="text-subtitle">Manage and Review Your Flights</p>
            </div>
        </div>
    </div>
</div>

<!-- 2) Main Container Overlapping the Carousel -->
<MudContainer MaxWidth="MaxWidth.Large" Class="pa-6 main-container fade-in-panel">
    <MudText Typo="Typo.h4" Class="mb-6 text-center">Bookings</MudText>

    @if (bookings?.Count > 0)
    {
        <MudExpansionPanels>
            @foreach (var booking in bookings)
            {
                <MudExpansionPanel Text="@($"Flight: {booking.Flight.SourceAirport.City} → {booking.Flight.DestinationAirport.City} - Date: {booking.Flight.ScheduledDepartureDate:dd/MM/yyyy}")">
                    <MudPaper Class="pa-4">
                        <MudGrid>
                            <MudItem xs="8">
                                <MudText Typo="Typo.subtitle1"><b>Passenger:</b> @booking.Passenger.PassengerName</MudText>
                                <MudText Typo="Typo.subtitle1"><b>Class:</b> @booking.Class</MudText>
                                <MudText Typo="Typo.subtitle1"><b>Seat No:</b> @booking.SeatNo</MudText>
                                <MudText Typo="Typo.subtitle1"><b>Total Cost:</b> @booking.TotalCost OMR</MudText>
                                <MudText Typo="Typo.subtitle1"><b>Meal:</b> @booking.Meal</MudText>
                                <MudText Typo="Typo.subtitle1"><b>Status:</b> @GetBookingStatus(booking.Status)</MudText>
                                <MudText Typo="Typo.subtitle1"><b>Booking Date:</b> @booking.BookingDate.ToString("dd/MM/yyyy HH:mm:ss")</MudText>
                            </MudItem>
                            <MudItem xs="4" Class="text-right">
                                <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="() => DeleteBooking(booking.BookingId)">
                                    Cancel Booking
                                </MudButton>
                            </MudItem>
                        </MudGrid>
                    </MudPaper>
                </MudExpansionPanel>
            }
        </MudExpansionPanels>
    }
    else
    {
        <MudText Typo="Typo.h6" Color="Color.Secondary" Class="text-center">No bookings found.</MudText>
    }
</MudContainer>

@code {
    public int userId { get; set; }
    private List<Booking> bookings = new();
    private List<PassengerOutputDTO> passengers = new();
    private string? Token;

    protected override void OnInitialized()
    {
        Token = HttpContextAccessor.HttpContext?.Request.Cookies["authToken"];
        if (!string.IsNullOrWhiteSpace(Token))
        {
            var claims = JwtHelper.GetClaimsFromToken(Token);
            if (claims != null)
            {
                userId = int.Parse(claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier).Value);

                passengers = passengerService.GetPassengerProfile(userId);

                foreach(var passenger in passengers)
                {
                    // Gather all bookings for each passenger under this user
                    bookings.AddRange(BookingService.GetBookingsForPassenger(passenger.Passport));
                }
            }
        }
    }

    private string GetBookingStatus(int status)
    {
        return status switch
        {
            0 => "Pending",
            1 => "Confirmed",
            2 => "Cancelled",
            _ => "Unknown"
        };
    }

    private void DeleteBooking(int bookingId)
    {
        try
        {
            // Cancel the booking
            BookingService.CancelBooking(bookingId);

            // Refresh the bookings list
            bookings.Clear();
            foreach (var passenger in passengers)
            {
                bookings.AddRange(BookingService.GetBookingsForPassenger(passenger.Passport));
            }
        }
        catch (Exception ex)
        {
            // Handle error, e.g., log or display a message
            Log.Error($"Error deleting booking: {ex.Message}");
        }
    }
}

<style>


/********************************************************
 * CORE COLORS / VARIABLES
 ********************************************************/
:root {
    --white-bg: #ffffff;
    --accent-blue: #3B82F6;  /* Lighter shade of blue */
    --accent-orange: #FFA500;
    --text-color: #333333;
    --light-gray: #f9f9f9;
}

/********************************************************
 * BODY / GLOBAL
 ********************************************************/
body {
        margin-top: -64px;
        min-height: 100vh;
    background: var(--white-bg);
    font-family: "Nunito", "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
    color: var(--text-color);
}

/********************************************************
 * CAROUSEL SECTION
 ********************************************************/
.carousel-container {
    margin: 0;
    padding: 0;
    background: linear-gradient(
        to bottom,
        rgba(59, 130, 246, 0.7),
        rgba(255, 165, 0, 0.2)
    );
    position: relative;
    overflow: hidden;
}

.custom-carousel {
    width: 100vw;
    height: 500px;
    position: relative;
}

.custom-carousel-item {
    width: 100%;
    height: 500px;
    position: relative;
}

.carousel-image {
    width: 100%;
    height: 500px;
    object-fit: cover;
    display: block;
}

/* Fade-out gradient at bottom if desired */
.custom-carousel-item::after {
    content: "";
    position: absolute;
    left: 0;
    right: 0;
    bottom: 0;
    height: 20%;
    background: linear-gradient(to bottom, rgba(255,255,255,0) 0%, #ffffff 100%);
    pointer-events: none;
}

/* Overlay text fade/slide in */
.text-overlay {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    text-align: center;
    color: var(--white-bg);
    margin: 0 20px;
    opacity: 0;
    animation: fadeInUp 1s ease forwards;
    animation-delay: 0.3s;
}

.text-title {
    font-size: 2.6rem;
    font-weight: 700;
    letter-spacing: 1px;
    margin-bottom: 1rem;
    text-shadow: 2px 2px 6px rgba(0, 0, 0, 0.5);
}

.text-subtitle {
    font-size: 1.4rem;
    font-weight: 400;
    text-shadow: 1px 1px 3px rgba(0, 0, 0, 0.5);
}

/********************************************************
 * MAIN CONTAINER (Frosted Glass)
 ********************************************************/
.main-container {
    margin: -120px auto 50px; /* Overlaps the carousel */
    padding: 30px;
    max-width: 1200px;

    background: rgba(255,255,255,0.6);
    backdrop-filter: blur(4px);
    -webkit-backdrop-filter: blur(4px);

    border-radius: 15px;
    box-shadow: 0px 4px 8px rgba(0,0,0,0.1);
    position: relative;
}

/********************************************************
 * FADE-IN ANIMATION
 ********************************************************/
@@keyframes fadeInUp {
    0% {
        opacity: 0;
        transform: translateY(20px);
    }
    100% {
        opacity: 1;
        transform: translateY(0);
    }
}

.fade-in-panel {
    animation: fadeInUp 0.5s ease-in-out forwards;
    opacity: 0;
}

/********************************************************
 * OPTIONAL UTILITY CLASSES
 ********************************************************/
.mb-6 {
    margin-bottom: 1.5rem;
}
.text-center {
    text-align: center;
}
.text-right {
    text-align: right;
}
</style>
