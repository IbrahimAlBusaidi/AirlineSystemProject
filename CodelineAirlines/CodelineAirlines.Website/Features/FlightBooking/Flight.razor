@page "/flights"
@inject IFlightService flightService
@inject NavigationManager NavManager
@attribute [AllowAnonymous]

<!-- Carousel Section -->
<div class="carousel-container">
    <div class="custom-carousel">
        <div class="custom-carousel-item">
            <img src="/Images/backgroundCarousel2.jpg" class="carousel-image" />
            <div class="text-overlay">
                <h1 class="text-title">Explore the Skies</h1>
                <p class="text-subtitle">Seamless Booking for Your Dream Destinations</p>
            </div>
        </div>
    </div>
</div>

<!-- Flights Section -->
<div class="flights-container">
    <h3 class="section-title">Available Flights</h3>

    <div class="flight-panels">
        @if (flights != null && flights.Any())
        {
            @foreach (var flight in flights.Select((f, i) => new { Flight = f, Index = i }))
            {
                <details class="flight-panel @($"delay-{flight.Index+1}")">
                    <summary>
                        @($"{flight.Flight.SourceAirportName} → {flight.Flight.DestinationAirportName} | {flight.Flight.ScheduledDepartureDate:dd MMM yyyy, HH:mm}")
                    </summary>

                    <div class="flight-details">
                        <div class="row">
                            <div class="col-8">
                                <p><strong>Flight Number:</strong> @flight.Flight.FlightNo</p>
                                <p><strong>Origin:</strong> @flight.Flight.SourceAirportName</p>
                                <p><strong>Destination:</strong> @flight.Flight.DestinationAirportName</p>
                                <p><strong>Departure:</strong> @flight.Flight.ScheduledDepartureDate.ToString("HH:mm")</p>
                                <p><strong>Arrival:</strong> @flight.Flight.ScheduledArrivalDate.ToString("HH:mm")</p>
                            </div>
                            <div class="col-4 text-right">
                                <p class="mb-2 price-tag"><strong>Price:</strong> @flight.Flight.Cost OMR</p>
                                <button class="book-button" @onclick="() => NavigateToBooking(flight.Flight.FlightNo.ToString())">
                                    BOOK NOW
                                </button>
                            </div>
                        </div>
                    </div>
                </details>
            }
        }
        else
        {
            <details class="flight-panel">
                <summary>No flights available</summary>
                <div class="flight-details">
                    <p>No flights available</p>
                </div>
            </details>
        }
    </div>
</div>

@code {
    public string? Origin = null;
    public string? Dest = null;
    public DateTime? startDate = null;
    public DateTime? endDate = null;

    private List<FlightOutputDTO> flights { get; set; } = new();

    protected override void OnInitialized()
    {
        var uri = NavManager.ToAbsoluteUri(NavManager.Uri);
        var queryParams = System.Web.HttpUtility.ParseQueryString(uri.Query);

        Origin = queryParams["origin"];
        Dest = queryParams["dest"];
        if (queryParams["startdate"] != null && DateTime.TryParse(queryParams["startdate"], out var parsedStartDate))
        {
            startDate = parsedStartDate;
        }

        if (queryParams["enddate"] != null && DateTime.TryParse(queryParams["enddate"], out var parsedEndDate))
        {
            endDate = parsedEndDate;
        }

        if (Origin != null && Dest != null && startDate != null && endDate != null)
        {
            GetFilteredFlights();
        }
        else
        {
            GetFlights();
        }
    }

    private void GetFilteredFlights()
    {
        flights = flightService.GetAllFlights()
            .Where(f =>
                f.SourceAirportName == Origin &&
                f.DestinationAirportName == Dest &&
                f.ScheduledDepartureDate >= startDate &&
                f.ScheduledDepartureDate <= endDate &&
                (f.Status == "Scheduled" || f.Status == "ReScheduled"))
            .ToList();
    }

    private void GetFlights()
    {
        flights = flightService.GetAllFlights()
            .Where(f => f.Status == "Scheduled" || f.Status == "ReScheduled")
            .ToList();
    }

    private void NavigateToBooking(string flightNo)
    {
        NavManager.NavigateTo($"/book-flight/{flightNo}");
    }
}

<style>

    :root {
        --white-bg: #ffffff;
        --accent-blue: #0D47A1;
        --accent-orange: #FFA500;
        --text-color: #333333;
        --light-gray: #f9f9f9;
    }

    body {
        margin-top: -64px;
        min-height: 100vh;
        background: var(--white-bg);

        /* Softer font: Nunito (fallback: Segoe UI, Tahoma, sans-serif) */
        font-family: "Nunito", "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
        color: var(--text-color);
    }

    /*****************************************************
     * Carousel Section
     *****************************************************/
    .carousel-container {
        position: relative;
        overflow: hidden;
        margin: 0;
        padding: 0;
        background: linear-gradient(
            to bottom,
            rgba(59, 130, 246, 0.7),
            rgba(255, 165, 0, 0.2)
        );
    }

    .custom-carousel {
        width: 100vw;
        height: 500px;
        position: relative;
    }

    .custom-carousel-item {
        width: 100%;
        height: 500px;
        position: relative;
    }

    .carousel-image {
        width: 100%;
        height: 500px;
        object-fit: cover;
        display: block;
    }

    /* 
       Pseudo-element overlay for a bottom fade, 
       blending the carousel image into the page 
    */
    .custom-carousel-item::after {
        content: "";
        position: absolute;
        left: 0;
        right: 0;
        bottom: 0;
        height: 20%; /* Adjust to control how tall the fade is */
        /* From transparent at top to solid white at bottom */
        background: linear-gradient(
            to bottom,
            rgba(255, 255, 255, 0) 0%,
            #ffffff 100%
        );
        pointer-events: none;
    }

    .text-overlay {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        text-align: center;
        color: var(--white-bg);
        margin: 0 20px;
        opacity: 0;
        animation: fadeInUp 1s ease forwards;
        animation-delay: 0.3s;
    }

    .text-title {
        font-size: 2.6rem;
        font-weight: 700;
        letter-spacing: 1px;
        margin-bottom: 1rem;
        text-shadow: 2px 2px 6px rgba(0, 0, 0, 0.5);
    }

    .text-subtitle {
        font-size: 1.4rem;
        font-weight: 400;
        text-shadow: 1px 1px 3px rgba(0, 0, 0, 0.5);
    }

    /*****************************************************
     * Flights Container
     *****************************************************/
    .flights-container {
        margin: -120px auto 50px;
        padding: 30px;
        max-width: 1200px;

        /* Slight transparency + blur for "frosted glass" feel */
        background: rgba(255, 255, 255, 0.6); 
        backdrop-filter: blur(4px);
        -webkit-backdrop-filter: blur(4px);

        border-radius: 15px;
        box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1);
        position: relative;
    }

    .section-title {
        font-size: 2rem;
        font-weight: 700;
        text-align: center;
        margin-bottom: 30px;
        color: var(--accent-blue);
        border-bottom: 2px solid var(--accent-orange);
        display: inline-block;
        padding-bottom: 10px;
    }

    /*****************************************************
     * Flight Panels (details/summary)
     *****************************************************/
    .flight-panels {
        border-radius: 10px;
        overflow: hidden;
    }

    /* Fade/slide-in animation */
    @@keyframes fadeInUp {
        0% {
            opacity: 0;
            transform: translateY(20px);
        }
        100% {
            opacity: 1;
            transform: translateY(0);
        }
    }

    details.flight-panel {
        opacity: 0;

        /* Glass effect: a bit of transparency + blur */
        background: rgba(255, 255, 255, 0.5);
        backdrop-filter: blur(5px);
        -webkit-backdrop-filter: blur(5px);

        border: 1px solid #e0e0e0;
        border-radius: 10px;
        margin-bottom: 10px;
        box-shadow: 0px 2px 5px rgba(0, 0, 0, 0.05);
        padding: 1rem;
        transition: background 0.2s ease-in-out;
        animation: fadeInUp 0.5s ease forwards;
    }

    /* Staggered delays for each panel, e.g. 1..5 */
    details.flight-panel.delay-1 { animation-delay: 0.1s; }
    details.flight-panel.delay-2 { animation-delay: 0.2s; }
    details.flight-panel.delay-3 { animation-delay: 0.3s; }
    details.flight-panel.delay-4 { animation-delay: 0.4s; }
    details.flight-panel.delay-5 { animation-delay: 0.5s; }

    details.flight-panel:hover {
        background: rgba(255, 255, 255, 0.7);
    }

    details.flight-panel summary {
        cursor: pointer;
        list-style: none;
        font-weight: 600;
        color: var(--accent-blue);
        outline: none;
        font-size: 1.1rem;
        padding-right: 25px;
        position: relative;
    }

    /* Hide default marker */
    details.flight-panel summary::-webkit-details-marker {
        display: none;
    }

    /* Expand/collapse icons */
    details.flight-panel[open] summary::after {
        content: "▲";
        position: absolute;
        right: 0;
        top: 4px;
        font-size: 0.7rem;
        color: var(--accent-orange);
    }
    details.flight-panel summary::after {
        content: "▼";
        position: absolute;
        right: 0;
        top: 4px;
        font-size: 0.7rem;
        color: var(--accent-orange);
    }

    .flight-details {
        padding: 20px;
        border-radius: 10px;
        background: var(--white-bg);
        box-shadow: 0px 2px 5px rgba(0, 0, 0, 0.05);
        margin-top: 0.75rem;
        transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
    }

    .flight-details:hover {
        transform: scale(1.01);
        box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1);
    }

    /*****************************************************
     * Price & Book Button
     *****************************************************/
    .price-tag {
        font-size: 1.1rem;
        color: var(--accent-orange);
        font-weight: 700;
    }

    .book-button {
        background: var(--accent-orange);
        color: var(--white-bg);
        font-weight: 600;
        border: none;
        padding: 10px 16px;
        border-radius: 4px;
        cursor: pointer;
        transition: background 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
    }

    .book-button:hover {
        background: #cc8400; /* darker orange on hover */
        box-shadow: 0px 3px 6px rgba(0, 0, 0, 0.2);
    }

    /*****************************************************
     * Utility Classes (row, col-x)
     *****************************************************/
    .row {
        display: flex;
        flex-wrap: wrap;
        margin-right: -15px;
        margin-left: -15px;
    }

    .col-8 {
        flex: 0 0 66.6667%;
        max-width: 66.6667%;
        padding: 0 15px;
    }

    .col-4 {
        flex: 0 0 33.3333%;
        max-width: 33.3333%;
        padding: 0 15px;
    }

    .text-right {
        text-align: right;
    }

    .mb-2 {
        margin-bottom: 0.5rem;
    }
</style>
